USE MOVIES
GO

-- CTE (COMMON TABLE EXPRESSIONS)
-- WHY NEEDED? BECAUSE WINDOWS FUNCTIONS WORKS WITH SELECT AND ORDER BY ONLY.
-- TO OVERCOME THIS, CTE ARE USED

-- CTE EXAMPLE

-- GET A CTE CONTAINING THOSE FILMS
-- WHICH LAST LONGER THAN 3 HOURS
WITH LONGFILMS AS 
(
   SELECT
      FILMNAME,
      FILMRELEASEDATE 
   FROM
      TBLFILM 
   WHERE
      FILMRUNTIMEMINUTES > 180 
)
-- USING THIS CTE, SORT THE ROWS
SELECT
	*
FROM
   LONGFILMS 
WHERE 
   FILMRELEASEDATE < '2005-01-01'


-- LOGIC

SELECT 
 SALESGROUP,
 COUNTRY,
 ANNUALSALES,
 SUM(ANNUALSALES) OVER(PARTITION BY SALESGROUP) AS TOTALSALES
FROM REGIONALSALES
WHERE SUM(ANNUALSALES) OVER(PARTITION BY SALESGROUP)>100000 -- ERROR

GO
-- OBSERVE ERROR

--SOLUTION USING COMMON TABLE EXPRESSION

WITH CTE AS
(
SELECT 
 SALESGROUP,
 COUNTRY,
 ANNUALSALES,
 SUM(ANNUALSALES) OVER(PARTITION BY SALESGROUP) AS TOTALSALES
FROM REGIONALSALES
)
SELECT * FROM CTE WHERE TOTALSALES>100000

--SOLUTION USING DERIVED TABLES

SELECT * FROM 
 (
   SELECT 
   SALESGROUP,
   COUNTRY,
   ANNUALSALES,
   SUM(ANNUALSALES) OVER(PARTITION BY SALESGROUP) AS TOTALSALES
   FROM REGIONALSALES
 ) AS T
WHERE T.TOTALSALES>100000

-- REMOVE DUPLICATE RECORDS IN A TABLE

CREATE TABLE DBO.EMPLOYEE
( 
EMPID INT IDENTITY(1,1) NOT NULL, 
NAME VARCHAR(55) NULL, 
SALARY DECIMAL(10, 2) NULL, 
DESIGNATION VARCHAR(20) NULL
 ) 
 GO

 INSERT INTO EMPLOYEE (NAME,SALARY,DESIGNATION) VALUES ('RAHUL',6000,'TL')
  INSERT INTO EMPLOYEE (NAME,SALARY,DESIGNATION) VALUES ('ASLAM',3500,'SE')
   INSERT INTO EMPLOYEE (NAME,SALARY,DESIGNATION) VALUES ('ROHIT',5000,'SSE')
    INSERT INTO EMPLOYEE (NAME,SALARY,DESIGNATION) VALUES ('ASLAM',3500,'SE')
	 INSERT INTO EMPLOYEE (NAME,SALARY,DESIGNATION) VALUES ('RAHUL',6000,'TL')
	  INSERT INTO EMPLOYEE (NAME,SALARY,DESIGNATION) VALUES ('SAGAR',3500,'SE')
	   INSERT INTO EMPLOYEE (NAME,SALARY,DESIGNATION) VALUES ('RAJESH',4000,'SE')

	   GO

	   SELECT * FROM EMPLOYEE
	   GO

WITH TEMPEMP (EMPID,NAME,SALARY,DESIGNATION,DUPLICATERECCOUNT)
AS
(
SELECT EMPID,NAME,SALARY,DESIGNATION,ROW_NUMBER() OVER(PARTITION BY NAME, SALARY,DESIGNATION ORDER BY EMPID) 
AS DUPLICATERECCOUNT
FROM DBO.EMPLOYEE
)
SELECT * FROM TEMPEMP

GO

WITH TEMPEMP (EMPID,NAME,SALARY,DESIGNATION,DUPLICATERECCOUNT)
AS
(
SELECT EMPID,NAME,SALARY,DESIGNATION,ROW_NUMBER() OVER(PARTITION BY NAME, SALARY,DESIGNATION ORDER BY EMPID) 
AS DUPLICATERECCOUNT
FROM DBO.EMPLOYEE
)
DELETE FROM TEMPEMP
WHERE DUPLICATERECCOUNT > 1 

GO

SELECT * FROM EMPLOYEE



--SELECT ONLY DUPLICATE RECORDS FROM A TABLE

SELECT * FROM EMPLOYEE
GO

DELETE FROM EMPLOYEE
GO

DBCC CHECKIDENT(EMPLOYEE,RESEED,0)
GO

 INSERT INTO EMPLOYEE (NAME,SALARY,DESIGNATION) VALUES ('RAHUL',6000,'TL')
  INSERT INTO EMPLOYEE (NAME,SALARY,DESIGNATION) VALUES ('ASLAM',3500,'SE')
   INSERT INTO EMPLOYEE (NAME,SALARY,DESIGNATION) VALUES ('ROHIT',5000,'SSE')
    INSERT INTO EMPLOYEE (NAME,SALARY,DESIGNATION) VALUES ('ASLAM',3500,'SE')
	 INSERT INTO EMPLOYEE (NAME,SALARY,DESIGNATION) VALUES ('RAHUL',6000,'TL')
	  INSERT INTO EMPLOYEE (NAME,SALARY,DESIGNATION) VALUES ('SAGAR',3500,'SE')
	   INSERT INTO EMPLOYEE (NAME,SALARY,DESIGNATION) VALUES ('RAJESH',4000,'SE')

	  GO

SELECT * FROM EMPLOYEE

;WITH CTE_DUPLICATE AS 
(
SELECT NAME,SALARY , DESIGNATION   FROM EMPLOYEE 
GROUP BY NAME,SALARY ,DESIGNATION
HAVING COUNT(*) >1
)
SELECT E.EMPID,E.NAME,E.SALARY,E.DESIGNATION FROM CTE_DUPLICATE C INNER JOIN EMPLOYEE E 
ON C.NAME=E.NAME AND C.SALARY=E.SALARY AND C.DESIGNATION=E.DESIGNATION


-- RECURSIVE CTE (IGNORE FOR NOW)


WITH TIMECTE ([TIME]) AS
	(SELECT CAST('20150101 00:00:00' AS DATETIME)			
	UNION ALL
	SELECT DATEADD(DAY, 1, [TIME])
	FROM TIMECTE
	WHERE [TIME] < CAST('20201231 23:50:00' AS DATETIME)
	)
SELECT 

 [TIME]
--,DATEPART(HOUR, TIME) AS HOUR
,CONVERT(DATE, TIME) AS DATE
--,DATEPART(MINUTE, TIME) AS MINUTES
,DATEPART(WEEKDAY, TIME) AS WEEKDAY
,DATENAME(MONTH, TIME) AS MONTHNAME
,DATEPART(MONTH, TIME) AS MONTHNUMBER 
FROM TIMECTE 
OPTION(MAXRECURSION 0)

GO

SELECT CAST(
   CAST(DATEPART(YYYY,GETDATE()) AS [CHAR](4))
       + RIGHT('0' + CAST(DATEPART(M,GETDATE()) AS [VARCHAR](2)),2)  
       + RIGHT('0' + CAST(DATEPART(D,GETDATE()) AS [VARCHAR](2)),2)
	   AS NUMERIC(10,0));

GO

--ADDING A DATEKEY COLUMN

WITH TIMECTE ([TIME]) AS
	(SELECT CAST('20150101 00:00:00' AS DATETIME)			
	UNION ALL
	SELECT DATEADD(DAY, 1, [TIME])
	FROM TIMECTE
	WHERE [TIME] < CAST('20201231 23:50:00' AS DATETIME)
	)
SELECT 
CAST(
 CAST(DATEPART(YYYY,[TIME]) AS [CHAR](4))
       + RIGHT('0' + CAST(DATEPART(M,[TIME]) AS [VARCHAR](2)),2)  
       + RIGHT('0' + CAST(DATEPART(D,[TIME]) AS [VARCHAR](2)),2) 
 AS NUMERIC(10,0))   AS DATEKEY
,CONVERT(DATE, TIME) AS DATE
,DATEPART(YEAR, TIME) AS [YEAR]
,DATEPART(WEEKDAY, TIME) AS WEEKDAY
,DATENAME(MONTH, TIME) AS MONTHNAME
,DATEPART(MONTH, TIME) AS MONTHNUMBER 
FROM TIMECTE 
OPTION(MAXRECURSION 0)



-- COALESCE -  RETURNS FIRST NOT NULL

CREATE TABLE [CTC](
	[ID] [INT] NOT NULL PRIMARY KEY,
	[NAME] [VARCHAR](50) NOT NULL,
	[HOURLY_PAYMENT] [INT] NULL,
	[SALARY] [INT] NULL,
	[COMMISSION] [INT] NULL,
	[NOH] [INT] NULL)

GO


INSERT [CTC] ([ID], [NAME], [HOURLY_PAYMENT], [SALARY], [COMMISSION], [NOH]) VALUES (1, N'GARY', NULL, 5000, NULL, NULL)
INSERT [CTC] ([ID], [NAME], [HOURLY_PAYMENT], [SALARY], [COMMISSION], [NOH]) VALUES (2, N'ADAM', NULL, NULL, 2000, NULL)
INSERT [CTC] ([ID], [NAME], [HOURLY_PAYMENT], [SALARY], [COMMISSION], [NOH]) VALUES (3, N'ALEX', 200, NULL, NULL, 14)
INSERT [CTC] ([ID], [NAME], [HOURLY_PAYMENT], [SALARY], [COMMISSION], [NOH]) VALUES (4, N'JOHN', 230, NULL, NULL, 10)
INSERT [CTC] ([ID], [NAME], [HOURLY_PAYMENT], [SALARY], [COMMISSION], [NOH]) VALUES (5, N'MIKE', NULL, 4000, NULL, NULL)

GO

SELECT * FROM [CTC]

GO

SELECT 
	ID
	,NAME
	,COALESCE(
		HOURLY_PAYMENT*NOH
		,SALARY
		,COMMISSION
		) AS COSTTOCOMPANY
FROM [CTC]


-- COALESCE WITH MERGE

INSERT INTO dbo.EmployeeUpdate (EmployeeID,FullName,EmploymentStatus)
VALUES (1, NULL,3);
INSERT INTO dbo.EmployeeUpdate (EmployeeID,FullName,EmploymentStatus)
VALUES (4, 'Jaya Gupta',NULL);
INSERT INTO dbo.EmployeeUpdate (EmployeeID,FullName,EmploymentStatus)
VALUES (6, 'Alex Cook',1);
select * from Employee
select * from EmployeeUpdate

MERGE INTO dbo.Employee AS e
USING dbo.EmployeeUpdate AS eu
ON e.EmployeeID = eu.EmployeeID
WHEN MATCHED THEN
    UPDATE SET e.FullName = COALESCE(eu.FullName,e.FullName),
               e.EmploymentStatus = COALESCE(eu.EmploymentStatus,e.EmploymentStatus)
WHEN NOT MATCHED THEN
    INSERT (EmployeeID, FullName, EmploymentStatus)
        VALUES (eu.EmployeeID, eu.FullName, eu.EmploymentStatus);

SELECT * FROM dbo.Employee;

-- MORE ON MERGE

IF OBJECT_ID('dbo.Employee', 'U') IS NOT NULL 
  DROP TABLE dbo.Employee; 

  IF OBJECT_ID('dbo.EmployeeUpdate', 'U') IS NOT NULL 
  DROP TABLE dbo.EmployeeUpdate; 

-- Step 2 - Create a master table and populate some rows



CREATE TABLE dbo.Employee
( EmployeeID int ,
  FullName nvarchar(40),
  EmploymentStatus int
);
GO

INSERT INTO dbo.Employee  (EmployeeID, FullName, EmploymentStatus)
  VALUES (1, 'David Hamilton',1);
 INSERT INTO dbo.Employee  (EmployeeID, FullName, EmploymentStatus)
  VALUES (2, 'Nupur Argawal',1);
INSERT INTO dbo.Employee  (EmployeeID, FullName, EmploymentStatus)
  VALUES (3, 'Guido Pica',2);
INSERT INTO dbo.Employee  (EmployeeID, FullName, EmploymentStatus)
  VALUES (4, 'Kim Truelsen',1);
GO

-- Step 3 - Create a table of updates and populate some rows
--          Note that we are updating David Hamilton's employment
--          status and Kim Truelsen is now Kim Akers. Also, we
--          have a new employee

CREATE TABLE dbo.EmployeeUpdate
( EmployeeUpdateID int IDENTITY(1,1) ,
  EmployeeID int NOT NULL,
  FullName nvarchar(40) NULL,
  EmploymentStatus int NULL
);
GO

INSERT INTO dbo.EmployeeUpdate (EmployeeID,FullName,EmploymentStatus)
VALUES (1, 'Vikas Munjal',3);
INSERT INTO dbo.EmployeeUpdate (EmployeeID,FullName,EmploymentStatus)
VALUES (4, 'Jaya Gupta',1);
INSERT INTO dbo.EmployeeUpdate (EmployeeID,FullName,EmploymentStatus)
VALUES (4, 'Joy Sharma ',12);
INSERT INTO dbo.EmployeeUpdate (EmployeeID,FullName,EmploymentStatus)
VALUES (5, 'David Harris',1);
GO

go


select * from Employee
select * from EmployeeUpdate

-- Error : Because there are two EmployeeID which has value 4 in the EmployeeUpdate Table

MERGE INTO dbo.Employee AS e
USING dbo.EmployeeUpdate AS eu
ON e.EmployeeID = eu.EmployeeID
WHEN MATCHED THEN
    UPDATE SET e.FullName = eu.FullName,
               e.EmploymentStatus = eu.EmploymentStatus
WHEN NOT MATCHED THEN
    INSERT (EmployeeID, FullName, EmploymentStatus)
        VALUES (eu.EmployeeID, eu.FullName, eu.EmploymentStatus)
		WHEN NOT MATCHED BY SOURCE THEN DELETE;

Go


DELETE FROM DBO.EMPLOYEEUPDATE WHERE FULLNAME='JOY SHARMA '

go



SELECT * FROM EMPLOYEE
SELECT * FROM EMPLOYEEUPDATE

--WHEN NOT MATCHED BY SOURCE Option in MERGE command

MERGE INTO dbo.Employee AS e
USING dbo.EmployeeUpdate AS eu
ON e.EmployeeID = eu.EmployeeID
WHEN MATCHED THEN
    UPDATE SET e.FullName = eu.FullName,
               e.EmploymentStatus = eu.EmploymentStatus
WHEN NOT MATCHED THEN
    INSERT (EmployeeID, FullName, EmploymentStatus)
        VALUES (eu.EmployeeID, eu.FullName, eu.EmploymentStatus)
		WHEN NOT MATCHED BY SOURCE THEN DELETE;

go

SELECT * FROM EMPLOYEE